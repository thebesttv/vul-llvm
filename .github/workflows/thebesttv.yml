name: Path-gen test

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable tmate'
        required: false
        default: false
  push:

jobs:
  show-current-branch:
    runs-on: ubuntu-latest
    name: Show current branch
    steps:
      - name: Show current branch
        run: echo "Current branch is ${{ github.ref }}"

  create-appimage:
    if: github.ref == 'refs/heads/tbt-17'
    needs: build-and-test
    runs-on: ubuntu-20.04
    name: Create AppImage
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install dependencies
        run: sudo apt-get install -y ninja-build fuse
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: ccache
        # 暂时用 cache 加速
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ github.job }}
          variant: sccache
      - name: Generate CMake
        run: |
            ./build-release.sh \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
      - name: Build tool
        run: ./graph-generation/tool -h

      - name: Get linuxdeploy
        # Download binary & set PATH, see: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
        run: |
          mkdir -p ~/.local/bin && cd ~/.local/bin
          wget -O linuxdeploy \
            https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20240109-1/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Create AppImage
        run: ./create-appimage.sh
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        timeout-minutes: 1440

      - name: Delete old release
        env:
          GH_TOKEN: ${{ github.token }}
        # if release doesn't exist, gh will fail
        run: gh release delete -y --cleanup-tag nightly || true

      # https://github.com/hashicorp/nomad-pack/blob/f11c6d6a6bcc0b7377de737ecc9ef59f2dbbe6d3/.github/workflows/nightly-release.yml#L35
      # This will create a new GitHub Release called `nightly`
      # If a release with this name already exists, it will overwrite the existing data
      - name: Advance nightly tag
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: "tags/nightly"
                })
            } catch (e) {
              console.log("Warning: The nightly tag doesn't exist yet, so there's nothing to do. Trace: " + e)
            }
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/nightly",
              sha: context.sha
            })

      - name: Publish release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create \
              --latest \
              --title Nightly \
              --generate-notes \
              nightly \
              build-release/tool-x86_64.AppImage

  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Quick: 缓存、只跑最基本的测试
        # Medium: 缓存、跑所有测试
        # Full: 从头编译、跑所有测试
        test_type: [Quick, Medium, Full]
    name: ${{ matrix.test_type }} test
    steps:
      - name: Maximize build space
        # 由于真实项目基于 Docker image，所以需要更多的空间
        if: ${{ matrix.test_type != 'Quick' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 35840
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install dependencies
        run: sudo apt-get install -y ninja-build
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: ccache
        # Quick 和 Medium 版本使用 ccache 加速编译，Full 版从头编译
        if: ${{ matrix.test_type != 'Full' }}
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ github.job }}
          variant: sccache
      - name: Pull Docker images in background
        # 真实项目需要 Docker image
        if: ${{ matrix.test_type != 'Quick' }}
        run: |
          docker pull thebesttv/arch:php &
          docker pull thebesttv/arch:snd &
      - name: Generate CMake
        run: |
          if [ "${{ matrix.test_type }}" != "Full" ]; then
            ./build-release.sh \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          else
            ./build-release.sh
          fi
      - name: Build tool
        run: |
          ./graph-generation/tool -h
      - name: Pull Docker images
        # 真实项目需要 Docker image
        if: ${{ matrix.test_type != 'Quick' }}
        run: |
          docker pull thebesttv/arch:php
          docker pull thebesttv/arch:snd
          df -h
      - name: Run test
        run: |
          if [ "${{ matrix.test_type }}" == "Quick" ]; then
            ./graph-generation/test.py
          else
            ./graph-generation/test.py -a
          fi
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        timeout-minutes: 1440
